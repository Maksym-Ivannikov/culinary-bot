from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from dotenv import load_dotenv
import aiocron
from datetime import datetime
import os

from handlers import register_handlers
from db import init_db, get_all_products_grouped_by_user
from callback_handlers import register_callback_handlers

load_dotenv()

bot = Bot(token=os.getenv("TELEGRAM_BOT_TOKEN") or os.getenv("BOT_TOKEN"))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# —á–∏—Ç–∞—î–º–æ ID –∫–∞–Ω–∞–ª—É –¥–ª—è —Ñ—ñ–¥–±–µ–∫—É
FEEDBACK_CHAT_ID = os.getenv("FEEDBACK_CHAT_ID")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
init_db()

# –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —Ö–µ–Ω–¥–ª–µ—Ä—ñ–≤
register_handlers(dp)
register_callback_handlers(dp, bot, FEEDBACK_CHAT_ID)

@aiocron.crontab('0 9 * * *')  # –©–æ–¥–Ω—è –æ 09:00
async def daily_expiry_check():
    print("‚è∞ –ó–∞–ø—É—Å–∫ —â–æ–¥–µ–Ω–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–µ—Ä–º—ñ–Ω—É –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ")
    users_products = await get_all_products_grouped_by_user()
    today_str = datetime.today().strftime("%d.%m.%Y")

    for user_id, products in users_products.items():
        expiring = []
        for name, date_str in products:
            if not date_str:
                continue
            if date_str == today_str:
                expiring.append(f"{name} (–¥–æ {date_str})")

        if expiring:
            text = (
                "üîî –ü—Ä–æ–¥—É–∫—Ç–∏, —É —è–∫–∏—Ö —Å—å–æ–≥–æ–¥–Ω—ñ —Å–ø–ª–∏–≤–∞—î —Ç–µ—Ä–º—ñ–Ω –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ:\n"
                + "\n".join(expiring)
                + "\n\n–°–ø—Ä–æ–±—É–π –ø—Ä–∏–≥–æ—Ç—É–≤–∞—Ç–∏ —â–æ—Å—å —ñ–∑ –Ω–∏—Ö –∞–±–æ –∑‚Äô—ó—Å—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ üßë‚Äçüç≥ü•ó"
            )
            await bot.send_message(user_id, text)

@aiocron.crontab('0 9 * * 6')  # –©–æ—Å—É–±–æ—Ç–∏ –æ 9:00
async def weekly_expired_check():
    print("üîÅ –©–æ—Ç–∏–∂–Ω–µ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤")
    users_products = await get_all_products_grouped_by_user()
    today = datetime.today()

    for user_id, products in users_products.items():
        expired = []
        for name, date_str in products:
            if not date_str:
                continue
            try:
                exp = datetime.strptime(date_str, "%d.%m.%Y")
            except ValueError:
                continue
            if exp < today:
                expired.append(f"{name} (–¥–æ {date_str})")

        if expired:
            text = (
                "‚ùó –£ —Ç–µ–±–µ —î –ø—Ä–æ–¥—É–∫—Ç–∏ –∑ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–º —Ç–µ—Ä–º—ñ–Ω–æ–º –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ:\n"
                + "\n".join(expired)
                + "\n\n–†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —ó—Ö –∑ –±–æ—Ç–∞ —Ç–∞ –∑ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞ üóë"
            )
            await bot.send_message(user_id, text)

if __name__ == "__main__":
    print("üõ† –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    executor.start_polling(dp, skip_updates=True)