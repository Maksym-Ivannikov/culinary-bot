from aiogram import types, Dispatcher, Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import re
from datetime import datetime

from db import (
    delete_product,
    get_all_products,
    get_fridge_view,
    add_product_to_db,
    get_all_products_with_ids,
    delete_product_by_id,
    update_product_quantity_by_id,
    get_user_profile,
    update_user_allergies,
    update_user_dislikes,
    update_user_status,
    clear_user_allergies,
    clear_user_dislikes,
)
from gpt import suggest_recipe, filter_expired_batches_before_deduction

# =========================
#          –°–¢–ê–ù–ò
# =========================
class AddProductState(StatesGroup):
    waiting_for_product = State()

class PartialDeleteState(StatesGroup):
    waiting_for_quantity = State()

class ProfileState(StatesGroup):
    waiting_for_allergies = State()
    waiting_for_dislikes = State()

class FeedbackState(StatesGroup):
    waiting_for_text = State()

# =========================
#        –ö–ù–û–ü–ö–ò / –ö–õ–ê–í–Ü
# =========================
def root_menu_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üìã –•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫", callback_data="fridge")],
        [InlineKeyboardButton("üçΩ –°—Ç—Ä–∞–≤–∞ –¥–Ω—è", callback_data="daily_dish")],
        [InlineKeyboardButton("üìÖ –¢–∏–∂–Ω–µ–≤–µ –º–µ–Ω—é", callback_data="weekly_menu")],
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="profile")],
        [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞ / –ü—Ä–æ –±–æ—Ç–∞", callback_data="help")],
        [InlineKeyboardButton("üìù –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Ç–∞ —ñ–¥–µ—ó", callback_data="feedback")],
    ])

def main_menu_keyboard() -> InlineKeyboardMarkup:
    # –∑–∞–ª–∏—à–µ–Ω–æ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ —Ç–≤–æ—ó–º –∫–æ–¥–æ–º
    return root_menu_keyboard()

def back_to_delete_list_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É –ø—Ä–æ–¥—É–∫—Ç—ñ–≤", callback_data="delete_product")],
        [InlineKeyboardButton("üìã –•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫", callback_data="fridge")],
    ])

def cancel_keyboard(to_main: bool = True) -> InlineKeyboardMarkup:
    target = "back_to_menu" if to_main else "fridge"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data=f"cancel_{target}")]
    ])

# =========================
#        –ì–û–õ. –ú–ï–ù–Æ / –•–û–õ–û–î–ò–õ–¨–ù–ò–ö
# =========================
async def handle_main_menu_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    fridge_contents = await get_fridge_view(callback_query.from_user.id)
    await callback_query.message.answer(fridge_contents)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üü© –î–æ–¥–∞—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç", callback_data="add_product")],
        [InlineKeyboardButton("üü• –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç", callback_data="delete_product")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")],
    ])
    await callback_query.message.answer("–û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=keyboard)

async def handle_fridge_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    action = callback_query.data
    user_id = callback_query.from_user.id

    if action == "add_product":
        await callback_query.message.answer(
            "üßæ –í–≤–µ–¥–∏ –ø—Ä–æ–¥—É–∫—Ç(–∏) —É —Ñ–æ—Ä–º–∞—Ç—ñ (—á–µ—Ä–µ–∑ –∫–æ–º—É):\n"
            "–ù–∞–∑–≤–∞(–º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–æ–±—ñ–ª–∏) –ö—ñ–ª—å–∫—ñ—Å—Ç—å –û–¥–∏–Ω–∏—Ü—è [–¢–µ—Ä–º—ñ–Ω –¥–¥.–º–º.—Ä—Ä—Ä—Ä ‚Äî –æ–ø—Ü—ñ–π–Ω–æ]\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ø–æ–º—ñ–¥–æ—Ä–∏ —á–µ—Ä—ñ 300 –≥ 25.07.2025, —Ç—É–Ω–µ—Ü—å –∫–æ–Ω—Å–µ—Ä–≤–æ–≤–∞–Ω–∏–π 1 —à—Ç, —è–π—Ü—è 6 —à—Ç",
            reply_markup=cancel_keyboard(to_main=True),
        )
        await AddProductState.waiting_for_product.set()

    elif action == "delete_product":
        products = await get_all_products_with_ids(user_id)
        if not products:
            await callback_query.message.answer("‚ùå –£ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫—É –Ω–µ–º–∞—î –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.", reply_markup=main_menu_keyboard())
            return

        keyboard = InlineKeyboardMarkup(row_width=1)
        for prod_id, name, quantity, unit, expiry in products:
            line = f"{name} ({quantity} {unit})"
            if expiry:
                line += f" ‚Äì {expiry}"
            keyboard.add(InlineKeyboardButton(line, callback_data=f"del_{prod_id}"))
        keyboard.add(InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu"))
        await callback_query.message.answer("–û–±–µ—Ä—ñ—Ç—å –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=keyboard)

    elif action.startswith("del_") and action.count("_") == 1:
        product_id = int(action.replace("del_", ""))
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é", callback_data=f"del_full_{product_id}"),
                InlineKeyboardButton("‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ —á–∞—Å—Ç–∫–æ–≤–æ", callback_data=f"del_partial_{product_id}"),
            ]
        ])
        await callback_query.message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=keyboard)

    elif action == "back_to_menu":
        await callback_query.message.answer("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=root_menu_keyboard())

# =========================
#          –í–ò–î–ê–õ–ï–ù–ù–Ø
# =========================
async def handle_delete_choice(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    action = callback_query.data

    if action.startswith("del_full_"):
        product_id = int(action.replace("del_full_", ""))
        await delete_product_by_id(product_id)
        await callback_query.message.answer("üóëÔ∏è –ü—Ä–æ–¥—É–∫—Ç –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–¥–∞–ª–µ–Ω–æ.", reply_markup=back_to_delete_list_keyboard())

    elif action.startswith("del_partial_"):
        product_id = int(action.replace("del_partial_", ""))
        await state.update_data(product_id=product_id)
        await callback_query.message.answer(
            "‚úÇÔ∏è –í–≤–µ–¥–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å, —è–∫—É —Ö–æ—á–µ—à –≤–∏–¥–∞–ª–∏—Ç–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1 –∞–±–æ 250):",
            reply_markup=cancel_keyboard(to_main=True),
        )
        await PartialDeleteState.waiting_for_quantity.set()

async def handle_partial_quantity_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    product_id = data.get("product_id")

    match = re.search(r"\d+([.,]\d+)?", message.text)
    if not match:
        await message.answer("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä–µ–∫—Ç–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 1 –∞–±–æ 1.5)", reply_markup=main_menu_keyboard())
        return

    try:
        amount = float(match.group().replace(",", "."))
    except ValueError:
        await message.answer("‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —á–∏—Å–ª–æ.", reply_markup=main_menu_keyboard())
        return

    if amount <= 0:
        await message.answer("‚ùó –ö—ñ–ª—å–∫—ñ—Å—Ç—å –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ –Ω—É–ª—è.", reply_markup=main_menu_keyboard())
        return

    products = await get_all_products_with_ids(message.from_user.id)
    product = next((p for p in products if p[0] == product_id), None)

    if not product:
        await message.answer("‚ùå –ü—Ä–æ–¥—É–∫—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu_keyboard())
        return

    _, name, old_quantity, unit, _ = product
    new_quantity = old_quantity - amount

    if new_quantity < 0:
        await message.answer(f"‚ùó –£ —Ç–µ–±–µ –ª–∏—à–µ {old_quantity} {unit}. –ü–æ–≤–µ—Ä–Ω–∏—Å—å –Ω–∞–∑–∞–¥ —Ç–∞ –≤–≤–µ–¥–∏ –º–µ–Ω—à–µ.", reply_markup=back_to_delete_list_keyboard())
    elif new_quantity == 0:
        await delete_product_by_id(product_id)
        await message.answer(f"‚úÖ –ü—Ä–æ–¥—É–∫—Ç {name} –ø–æ–≤–Ω—ñ—Å—Ç—é –≤–∏–¥–∞–ª–µ–Ω–æ.", reply_markup=back_to_delete_list_keyboard())
    else:
        await update_product_quantity_by_id(product_id, new_quantity)
        await message.answer(f"üîÑ –ó–∞–ª–∏—à–∏–ª–æ—Å—å {new_quantity} {unit} –ø—Ä–æ–¥—É–∫—Ç—É {name}.", reply_markup=back_to_delete_list_keyboard())

    await state.finish()

# =========================
#         –î–û–î–ê–í–ê–ù–ù–Ø
# =========================
async def handle_product_input(message: types.Message, state: FSMContext):
    await add_product_to_db(user_id=message.from_user.id, text=message.text)
    await message.reply("‚úÖ –ü—Ä–æ–¥—É–∫—Ç(–∏) –¥–æ–¥–∞–Ω–æ –¥–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞!", reply_markup=main_menu_keyboard())
    await state.finish()

# =========================
#        –°–¢–†–ê–í–ê –î–ù–Ø
# =========================
async def handle_daily_dish(callback_query: types.CallbackQuery):
    await callback_query.answer()
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üç≥ –°–Ω—ñ–¥–∞–Ω–æ–∫", callback_data="daily_dish_breakfast")],
        [InlineKeyboardButton("üçù –û–±—ñ–¥", callback_data="daily_dish_lunch")],
        [InlineKeyboardButton("üç≤ –í–µ—á–µ—Ä—è", callback_data="daily_dish_dinner")],
        [InlineKeyboardButton("üç© –ü–µ—Ä–µ–∫—É—Å", callback_data="daily_dish_snack")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")],
    ])
    await callback_query.message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–∏–π–æ–º—É —ó–∂—ñ:", reply_markup=keyboard)

async def handle_meal_type_selection(callback_query: types.CallbackQuery):
    await callback_query.answer()
    user_id = callback_query.from_user.id
    meal_type = callback_query.data.replace("daily_dish_", "")  # breakfast / lunch / dinner / snack
    print(f"üçΩÔ∏è CALLBACK: daily_dish ‚Üí {meal_type}")

    await callback_query.message.answer("‚è≥ –ì–µ–Ω–µ—Ä—É—é —Å—Ç—Ä–∞–≤—É...")
    recipe = await suggest_recipe(user_id, meal_type)

    if recipe.startswith("‚ùå –£—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫—É"):
        await callback_query.message.answer(
            "üö´ –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å—Ç—Ä–∞–≤—É, –±–æ —É —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫—É –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç—É, —è–∫–∏–π –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏.\n"
            "–ú–æ–∂–ª–∏–≤–æ, –≤—Å—ñ –≤–æ–Ω–∏ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –∞–±–æ –≤—Ö–æ–¥—è—Ç—å –¥–æ —Å–ø–∏—Å–∫—É –∞–ª–µ—Ä–≥–µ–Ω—ñ–≤/–Ω–µ–ª—é–±–∏–º–∏—Ö.\n\n"
            "üßæ –î–æ–¥–∞–π –Ω–æ–≤—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ –∞–±–æ –∑–º—ñ–Ω–∏ –ø—Ä–æ—Ñ—ñ–ª—å, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ—Ü–µ–ø—Ç–∏.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton("üìã –•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫", callback_data="fridge")],
                [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ—ñ–ª—å", callback_data="profile")],
                [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")],
            ]),
        )
        return

    if "–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏:" not in recipe:
        print("‚ö†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ—Ü–µ–ø—Ç—É –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ—á—ñ–∫—É–≤–∞–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É!")
        await callback_query.message.answer(
            "‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å—Ç—Ä–∞–≤–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ üîÅ –Ü–Ω—à–∞ —Å–ø—Ä–æ–±–∞.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton("üîÅ –Ü–Ω—à–∞ —Å–ø—Ä–æ–±–∞", callback_data=f"daily_dish_{meal_type}")],
                [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")],
            ]),
        )
        return

    # --- –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–Ω—è ---
    global last_generated_ingredients
    last_generated_ingredients = {}

    try:
        ingredients_block = recipe.split("–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏:")[1].split("üî∑")[0]
        lines = ingredients_block.strip().split("\n")
        for line in lines:
            if "-" not in line:
                continue
            parts = line.strip("- ").rsplit(",", 1)
            if len(parts) != 2:
                continue
            name = parts[0].strip().lower()
            quantity_unit = parts[1].strip()
            match = re.match(r"([\d.,]+)\s*(\S+)", quantity_unit)
            if match:
                quantity = float(match.group(1).replace(",", "."))
                unit = match.group(2)
                last_generated_ingredients[(name, unit)] = quantity
    except Exception as e:
        print("‚ùå –ü–∞—Ä—Å–∏–Ω–≥ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤ –Ω–µ –≤–¥–∞–≤—Å—è:", e)
        await callback_query.message.answer(
            "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –∞–±–æ –≤–∏–±–µ—Ä–∏ —ñ–Ω—à—É —Å—Ç—Ä–∞–≤—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton("üîÅ –Ü–Ω—à–∞ —Å–ø—Ä–æ–±–∞", callback_data=f"daily_dish_{meal_type}")],
                [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")],
            ]),
        )
        return

    await callback_query.message.answer(recipe, reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚úÖ –ì–æ—Ç—É—é —Ü–µ!", callback_data="cook_confirm")],
        [InlineKeyboardButton("üîÅ –Ü–Ω—à–∞ —Å—Ç—Ä–∞–≤–∞", callback_data=f"daily_dish_{meal_type}")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")],
    ]))

# --- –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è / —Å–ø–∏—Å–∞–Ω–Ω—è ---
from aiogram import types as _types
from aiogram.types import InlineKeyboardMarkup as _InlineKeyboardMarkup, InlineKeyboardButton as _InlineKeyboardButton

last_generated_ingredients = {}  # –ø—Ä–æ–¥—É–∫—Ç_–Ω–∞–∑–≤–∞ ‚Üí (–∫—ñ–ª—å–∫—ñ—Å—Ç—å, –æ–¥–∏–Ω–∏—Ü—è)

async def handle_cook_confirm(callback_query: _types.CallbackQuery):
    await callback_query.answer("üç≥ –ì–æ—Ç—É—î–º–æ —Å—Ç—Ä–∞–≤—É...")
    user_id = callback_query.from_user.id

    fridge = await get_all_products_with_ids(user_id)

    fridge_dict = {}
    for prod_id, name, quantity, unit, expiry in fridge:
        key = (name.lower(), unit)
        exp_dt = None
        if expiry:
            try:
                exp_dt = datetime.strptime(expiry, "%d.%m.%Y")
            except Exception:
                exp_dt = None
        fridge_dict.setdefault(key, []).append((prod_id, float(quantity), exp_dt))

    print("üì¶ –°–ø–∏—Å–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤:")
    for (ingredient, unit), needed_qty in last_generated_ingredients.items():
        key = (ingredient.lower(), unit)
        batches = fridge_dict.get(key, [])

        batches = filter_expired_batches_before_deduction(batches)
        if not batches:
            print(f"‚ö†Ô∏è {ingredient} ({unit}) ‚Äî –≤—Å—ñ –ø–∞—Ä—Ç—ñ—ó –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
            continue

        def sort_key(batch):
            _, _, exp_dt = batch
            if exp_dt is None:
                return (1, datetime.max)
            return (0, exp_dt)
        batches.sort(key=sort_key)

        print(f"üî∏ {ingredient} ({unit}) ‚Äî –ø–æ—Ç—Ä—ñ–±–Ω–æ {needed_qty}")

        for prod_id, available_qty, exp_dt in batches:
            if needed_qty <= 0:
                break
            used_qty = min(available_qty, needed_qty)
            needed_qty -= used_qty
            remaining = round(available_qty - used_qty, 3)

            exp_str = exp_dt.strftime('%d.%m.%Y') if exp_dt else "–±–µ–∑ —Ç–µ—Ä–º—ñ–Ω—É"
            print(f"  üßæ –ü–∞—Ä—Ç—ñ—è –¥–æ {exp_str}: –±—É–ª–æ {available_qty}, —Å–ø–∏—Å–∞–Ω–æ {used_qty}, –∑–∞–ª–∏—à–∏–ª–æ—Å—å {remaining}")

            if remaining > 0:
                await update_product_quantity_by_id(prod_id, remaining)
            else:
                await delete_product_by_id(prod_id)

    await callback_query.message.answer("‚úÖ –•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ –æ–Ω–æ–≤–ª–µ–Ω–æ –ø—ñ—Å–ª—è –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è —Å—Ç—Ä–∞–≤–∏.")

# =========================
#            –ü–†–û–§–Ü–õ–¨
# =========================
async def handle_profile_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    user_id = callback_query.from_user.id
    profile = await get_user_profile(user_id)

    allergies = profile.get("allergies", "") or "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
    dislikes = profile.get("dislikes", "") or "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
    status = profile.get("status", "") or "–∑–≤–∏—á–∞–π–Ω–∏–π"

    text = (
        "üë§ –¢–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å:\n"
        f"‚Ä¢ ü§ß –ê–ª–µ—Ä–≥—ñ—ó: {allergies}\n"
        f"‚Ä¢ üôÖ‚Äç‚ôÇÔ∏è –ù–µ –ª—é–±–ª—é: {dislikes}\n"
        f"‚Ä¢ üå± –°—Ç–∞—Ç—É—Å: {status}"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∞–ª–µ—Ä–≥—ñ—ó", callback_data="edit_allergies")],
        [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç–∏ –∞–ª–µ—Ä–≥—ñ—ó", callback_data="clear_allergies")],
        [InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ '–ù–µ –ª—é–±–ª—é'", callback_data="edit_dislikes")],
        [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç–∏ '–ù–µ –ª—é–±–ª—é'", callback_data="clear_dislikes")],
        [InlineKeyboardButton("üåø –í–µ–≥–µ—Ç–∞—Ä—ñ–∞–Ω–µ—Ü—å", callback_data="set_status_vegetarian")],
        [InlineKeyboardButton("üå± –í–µ–≥–∞–Ω", callback_data="set_status_vegan")],
        [InlineKeyboardButton("üîÑ –°–∫–∏–Ω—É—Ç–∏ —Å—Ç–∞—Ç—É—Å", callback_data="set_status_none")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")],
    ])
    await callback_query.message.answer(text, reply_markup=keyboard)

async def handle_profile_buttons(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    action = callback_query.data
    user_id = callback_query.from_user.id

    if action == "edit_allergies":
        await callback_query.message.answer("ü§ß –í–≤–µ–¥–∏ –∞–ª–µ—Ä–≥—ñ—ó (—á–µ—Ä–µ–∑ –∫–æ–º—É):", reply_markup=cancel_keyboard(to_main=True))
        await ProfileState.waiting_for_allergies.set()

    elif action == "edit_dislikes":
        await callback_query.message.answer("üôÖ‚Äç‚ôÇÔ∏è –í–≤–µ–¥–∏ –ø—Ä–æ–¥—É–∫—Ç–∏, —è–∫—ñ –Ω–µ –ª—é–±–∏—à (—á–µ—Ä–µ–∑ –∫–æ–º—É):", reply_markup=cancel_keyboard(to_main=True))
        await ProfileState.waiting_for_dislikes.set()

    elif action == "set_status_vegan":
        await update_user_status(user_id, "–≤–µ–≥–∞–Ω")
        await callback_query.message.answer("üåø –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: –≤–µ–≥–∞–Ω")
        await handle_profile_callback(callback_query)

    elif action == "set_status_vegetarian":
        await update_user_status(user_id, "–≤–µ–≥–µ—Ç–∞—Ä—ñ–∞–Ω–µ—Ü—å")
        await callback_query.message.answer("ü•ï –°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: –≤–µ–≥–µ—Ç–∞—Ä—ñ–∞–Ω–µ—Ü—å")
        await handle_profile_callback(callback_query)

    elif action == "set_status_none":
        await update_user_status(user_id, "")
        await callback_query.message.answer("üîÑ –°—Ç–∞—Ç—É—Å —Å–∫–∏–Ω—É—Ç–æ –¥–æ –∑–≤–∏—á–∞–π–Ω–æ–≥–æ")
        await handle_profile_callback(callback_query)

    elif action == "clear_allergies":
        await clear_user_allergies(user_id)
        await callback_query.message.answer("üßΩ –ê–ª–µ—Ä–≥—ñ—ó –æ—á–∏—â–µ–Ω–æ.")
        await handle_profile_callback(callback_query)

    elif action == "clear_dislikes":
        await clear_user_dislikes(user_id)
        await callback_query.message.answer("üßΩ '–ù–µ –ª—é–±–ª—é' –æ—á–∏—â–µ–Ω–æ.")
        await handle_profile_callback(callback_query)

async def handle_profile_text_input(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    current_state = await state.get_state()

    if current_state == ProfileState.waiting_for_allergies.state:
        await update_user_allergies(user_id, message.text.strip())
        await message.answer("‚úÖ –ê–ª–µ—Ä–≥—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–æ!")

    elif current_state == ProfileState.waiting_for_dislikes.state:
        await update_user_dislikes(user_id, message.text.strip())
        await message.answer("‚úÖ –°–ø–∏—Å–æ–∫ '–ù–µ –ª—é–±–ª—é' –æ–Ω–æ–≤–ª–µ–Ω–æ!")

    await state.finish()

    # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø—Ä–æ—Ñ—ñ–ª—é –ø—ñ—Å–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    profile = await get_user_profile(user_id)

    allergies = profile.get("allergies", "") or "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
    dislikes = profile.get("dislikes", "") or "–Ω–µ –≤–∫–∞–∑–∞–Ω–æ"
    status = profile.get("status", "") or "–∑–≤–∏—á–∞–π–Ω–∏–π"

    text = (
        "üë§ –¢–≤—ñ–π –ø—Ä–æ—Ñ—ñ–ª—å:\n"
        f"‚Ä¢ ü§ß –ê–ª–µ—Ä–≥—ñ—ó: {allergies}\n"
        f"‚Ä¢ üôÖ‚Äç‚ôÇÔ∏è –ù–µ –ª—é–±–ª—é: {dislikes}\n"
        f"‚Ä¢ üå± –°—Ç–∞—Ç—É—Å: {status}"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ –∞–ª–µ—Ä–≥—ñ—ó", callback_data="edit_allergies")],
        [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç–∏ –∞–ª–µ—Ä–≥—ñ—ó", callback_data="clear_allergies")],
        [InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ '–ù–µ –ª—é–±–ª—é'", callback_data="edit_dislikes")],
        [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç–∏ '–ù–µ –ª—é–±–ª—é'", callback_data="clear_dislikes")],
        [InlineKeyboardButton("üåø –í–µ–≥–µ—Ç–∞—Ä—ñ–∞–Ω–µ—Ü—å", callback_data="set_status_vegetarian")],
        [InlineKeyboardButton("üå± –í–µ–≥–∞–Ω", callback_data="set_status_vegan")],
        [InlineKeyboardButton("üîÑ –°–∫–∏–Ω—É—Ç–∏ —Å—Ç–∞—Ç—É—Å", callback_data="set_status_none")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")],
    ])

    await message.answer(text, reply_markup=keyboard)

# =========================
#        –ó–ê–ì–õ–£–®–ö–ò
# =========================
async def handle_weekly_menu_placeholder(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("üìÖ –¶—è —Ñ—É–Ω–∫—Ü—ñ—è —â–µ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ. –°–∫–æ—Ä–æ –∑ º—è–≤–∏—Ç—å—Å—è –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–ª–∞–Ω—É–≤–∞—Ç–∏ –º–µ–Ω—é –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å!")

async def handle_help_placeholder(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer(
        "üç≥ **–ü—Ä–æ –∫—É–ª—ñ–Ω–∞—Ä–Ω–æ–≥–æ –±–æ—Ç–∞**\n\n"
        "–Ø –¥–æ–ø–æ–º–∞–≥–∞—é —à–≤–∏–¥–∫–æ –≤–∏–≥–∞–¥—É–≤–∞—Ç–∏, —â–æ –ø—Ä–∏–≥–æ—Ç—É–≤–∞—Ç–∏ –∑ —Ç–æ–≥–æ, —â–æ —î –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫—É ‚Äî –±–µ–∑ –∑–∞–π–≤–æ–≥–æ –∫–ª–æ–ø–æ—Ç—É.\n\n"
        "---\n\n"
        "## üîß –©–æ –≤–º—ñ—é –∑–∞—Ä–∞–∑ (MVP)\n\n"
        "**üßä –•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫**\n"
        "- –î–æ–¥–∞–≤–∞–π –ø—Ä–æ–¥—É–∫—Ç–∏ –æ–¥–Ω—ñ—î—é —Å—Ç—Ä–æ–∫–æ—é: `–ø–æ–º—ñ–¥–æ—Ä–∏ —á–µ—Ä—ñ 300 –≥ 01.10.2025, —Ç—É–Ω–µ—Ü—å –∫–æ–Ω—Å–µ—Ä–≤–æ–≤–∞–Ω–∏–π 1 —à—Ç, —è–π—Ü—è 6 —à—Ç`\n"
        "- –ù–∞–∑–≤–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∑ –∫—ñ–ª—å–∫–æ—Ö —Å–ª—ñ–≤.\n"
        "- –¢–µ—Ä–º—ñ–Ω –ø—Ä–∏–¥–∞—Ç–Ω–æ—Å—Ç—ñ ‚Äî **–æ–ø—Ü—ñ–π–Ω–∏–π**.\n"
        "- –ú–æ–∂–Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –≤–º—ñ—Å—Ç —Ç–∞ –≤–∏–¥–∞–ª—è—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏ (–ø–æ–≤–Ω—ñ—Å—Ç—é –∞–±–æ —á–∞—Å—Ç–∫–æ–≤–æ).\n\n"
        "**üçΩ –°—Ç—Ä–∞–≤–∞ –¥–Ω—è**\n"
        "- –ì–µ–Ω–µ—Ä—É—é —Ä–µ—Ü–µ–ø—Ç –∑ —Ç–æ–≥–æ, —â–æ —î —É —Ç–≤–æ—î–º—É —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫—É.\n"
        "- –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç ‚Äî –ø—Ä–æ–¥—É–∫—Ç–∏, —É —è–∫–∏—Ö —Å–∫–æ—Ä–æ —Å–ø–ª–∏–≤–∞—î —Ç–µ—Ä–º—ñ–Ω.\n"
        "- –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è.\n\n"
        "**üë§ –ü—Ä–æ—Ñ—ñ–ª—å**\n"
        "- –í–∫–∞–∂–∏ –∞–ª–µ—Ä–≥—ñ—ó —Ç–∞ ‚Äú–Ω–µ –ª—é–±–ª—é‚Äù ‚Äî —è —ó—Ö —É–Ω–∏–∫–∞—Ç–∏–º—É.\n"
        "- –°—Ç–∞—Ç—É—Å —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è: –∑–≤–∏—á–∞–π–Ω–∏–π / –≤–µ–≥–µ—Ç–∞—Ä—ñ–∞–Ω–µ—Ü—å / –≤–µ–≥–∞–Ω.\n\n"
        "**üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è**\n"
        "- –©–æ–¥–Ω—è –æ 09:00 ‚Äî –ø—Ä–æ –ø—Ä–æ–¥—É–∫—Ç–∏, —â–æ —Å–ø–ª–∏–≤–∞—é—Ç—å —Å—å–æ–≥–æ–¥–Ω—ñ.\n"
        "- –©–æ—Å—É–±–æ—Ç–∏ –æ 09:00 ‚Äî –ø—Ä–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏.\n\n"
        "---\n\n"
        "## ‚úçÔ∏è –Ø–∫ –≤–≤–æ–¥–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏\n"
        "- –§–æ—Ä–º–∞—Ç: `–ù–∞–∑–≤–∞ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –û–¥–∏–Ω–∏—Ü—è [–¢–µ—Ä–º—ñ–Ω –¥–¥.–º–º.—Ä—Ä—Ä—Ä ‚Äî –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ]`\n"
        "- –ü—Ä–∏–∫–ª–∞–¥–∏:\n"
        "  - `–ø–æ–º—ñ–¥–æ—Ä–∏ —á–µ—Ä—ñ 300 –≥ 01.10.2025`\n"
        "  - `–º–æ–ª–æ–∫–æ 1 –ª`\n"
        "  - `—è–π—Ü—è –∫—É—Ä—è—á—ñ 10 —à—Ç`\n\n"
        "---\n\n"
        "## üó∫ –î–æ—Ä–æ–∂–Ω—è –∫–∞—Ä—Ç–∞ (—É —Ä–æ–∑—Ä–æ–±—Ü—ñ)\n"
        "- üìÖ –¢–∏–∂–Ω–µ–≤–µ –º–µ–Ω—é\n"
        "- üèãÔ∏è –ë–ñ–£ —Ç–∞ –∫–∞–ª–æ—Ä—ñ—ó –¥–ª—è —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ñ–≤\n"
        "- üéØ –ú–µ–Ω—é –ø—ñ–¥ —Ä—ñ–∑–Ω—ñ —Ü—ñ–ª—ñ\n"
        "- üß† –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ö–∞—Ä—á–æ–≤–∏—Ö –∑–≤–∏—á–æ–∫ —ñ –†–ü–ü\n\n"
        "---\n\n"
        "## üîê –ü—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å\n"
        "–î–∞–Ω—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –±–æ—Ç–∞.\n\n"
        "üí° –ú–∞—î—à —ñ–¥–µ—ó —á–∏ –∑–Ω–∞–π—à–æ–≤ –±–∞–≥? –ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É *üìù –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Ç–∞ —ñ–¥–µ—ó* —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é ‚Äî —Ç–≤—ñ–π –≤—ñ–¥–≥—É–∫ –æ–¥—Ä–∞–∑—É –ø–æ—Ç—Ä–∞–ø–∏—Ç—å —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É.",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ]),
    )

# =========================
#          –§–Ü–î–ë–ï–ö
# =========================
async def handle_feedback_click(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await callback_query.message.answer(
        "üìù –ù–∞–ø–∏—à–∏ —Å–≤–æ—ó —ñ–¥–µ—ó, –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –∞–±–æ –±–∞–≥–∏ –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º.\n"
        "_–Ø –ø–µ—Ä–µ—à–ª—é —ó—Ö —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É._",
        reply_markup=cancel_keyboard(to_main=True),
    )
    await FeedbackState.waiting_for_text.set()

async def handle_feedback_text(message: types.Message, state: FSMContext, bot: Bot, feedback_chat_id: str):
    text = (message.text or "").strip()
    if not text:
        await message.answer("‚ùó –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—î. –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ ‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏.")
        return

    user = message.from_user
    msg = (
        f"üÜï *–ù–æ–≤–∏–π —Ñ—ñ–¥–±–µ–∫*\n\n"
        f"üë§ –í—ñ–¥: [{user.first_name}](tg://user?id={user.id}) (@{user.username or '‚Äî'})\n"
        f"üÜî ID: `{user.id}`\n"
        f"üåê language: `{user.language_code or '‚Äî'}`\n"
        f"‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî\n"
        f"{text}"
    )
    try:
        await bot.send_message(feedback_chat_id, msg, parse_mode="Markdown", disable_web_page_preview=True)
        # –∑–∞–ª–∏—à–∞—î–º–æ forward –¥–ª—è –ø—Ä–æ–∑–æ—Ä–æ—Å—Ç—ñ —É —Ç–µ—Å—Ç–æ–≤–æ–º—É –ø–µ—Ä—ñ–æ–¥—ñ
        await bot.forward_message(feedback_chat_id, message.chat.id, message.message_id)
    except Exception as e:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ—ñ–¥–±–µ–∫:", e)

    await message.answer("‚úÖ –î—è–∫—É—é! –¢–≤—ñ–π —Ñ—ñ–¥–±–µ–∫ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É.", reply_markup=root_menu_keyboard())
    await state.finish()

# =========================
#        –°–ö–ê–°–£–í–ê–ù–ù–Ø
# =========================
async def handle_cancel(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback_query.answer("‚ùå –î—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    await callback_query.message.answer("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=root_menu_keyboard())

# =========================
#        –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø
# =========================
def register_callback_handlers(dp: Dispatcher, bot: Bot, feedback_chat_id: str):
    # –•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫
    dp.register_callback_query_handler(handle_main_menu_callback, lambda c: c.data == "fridge")
    dp.register_callback_query_handler(handle_cancel, lambda c: c.data.startswith("cancel_"), state="*")
    dp.register_callback_query_handler(
        handle_delete_choice,
        lambda c: c.data.startswith("del_full_") or c.data.startswith("del_partial_"),
    )
    dp.register_callback_query_handler(
        handle_fridge_callback,
        lambda c: c.data.startswith("del_") or c.data in ["add_product", "delete_product", "back_to_menu"],
    )
    dp.register_message_handler(handle_product_input, state=AddProductState.waiting_for_product)
    dp.register_message_handler(handle_partial_quantity_input, state=PartialDeleteState.waiting_for_quantity)

    # –°—Ç—Ä–∞–≤–∞ –¥–Ω—è
    dp.register_callback_query_handler(handle_daily_dish, lambda c: c.data == "daily_dish")
    dp.register_callback_query_handler(handle_meal_type_selection, lambda c: c.data.startswith("daily_dish_"))
    dp.register_callback_query_handler(handle_cook_confirm, lambda c: c.data == "cook_confirm")

    # –ó–∞–≥–ª—É—à–∫–∏
    dp.register_callback_query_handler(handle_weekly_menu_placeholder, lambda c: c.data == "weekly_menu")
    dp.register_callback_query_handler(handle_help_placeholder, lambda c: c.data == "help")

    # –ü—Ä–æ—Ñ—ñ–ª—å
    dp.register_callback_query_handler(handle_profile_callback, lambda c: c.data == "profile")
    dp.register_callback_query_handler(
        handle_profile_buttons,
        lambda c: c.data.startswith("edit_") or c.data.startswith("set_status") or c.data.startswith("clear_"),
    )
    dp.register_message_handler(handle_profile_text_input, state=ProfileState.waiting_for_allergies)
    dp.register_message_handler(handle_profile_text_input, state=ProfileState.waiting_for_dislikes)

    # –§—ñ–¥–±–µ–∫
    dp.register_callback_query_handler(handle_feedback_click, lambda c: c.data == "feedback")
    dp.register_message_handler(
        lambda msg, state, b=bot, fc=feedback_chat_id: handle_feedback_text(msg, state, b, fc),
        state=FeedbackState.waiting_for_text,
    )
