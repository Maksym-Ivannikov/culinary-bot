from dotenv import load_dotenv
load_dotenv()

import os
import re
from datetime import datetime, timedelta, date
from typing import List, Tuple, Optional
from openai import AsyncOpenAI
from db import get_all_products_with_expiry, get_user_profile

client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

BASIC_INGREDIENTS = [
    "—Å—ñ–ª—å", "–ø–µ—Ä–µ—Ü—å", "—Ü—É–∫–æ—Ä", "–±–æ—Ä–æ—à–Ω–æ", "—Å–æ–¥–∞", "—Ä–æ–∑–ø—É—à—É–≤–∞—á", "–æ—Ü–µ—Ç",
    "–æ–ª—ñ—è", "–≤–µ—Ä—à–∫–æ–≤–µ –º–∞—Å–ª–æ", "—Ä–æ—Å–ª–∏–Ω–Ω–µ –º–∞—Å–ª–æ", "–º–µ–¥", "–≤–æ–¥–∞",
    "—Å–ø–µ—Ü—ñ—ó", "—á–∞—Å–Ω–∏–∫ —Å—É—à–µ–Ω–∏–π", "—Ü–∏–±—É–ª—è —Å—É—à–µ–Ω–∞", "–ø–∞–ø—Ä–∏–∫–∞", "–ª–∞–≤—Ä–æ–≤–∏–π –ª–∏—Å—Ç",
    "–∫–æ—Ä–∏—Ü—è", "—ñ–º–±–∏—Ä", "–≤–∞–Ω—ñ–ª—å",
    "—Ö–ª—ñ–±", "–±–∞—Ç–æ–Ω", "—Å—É—Ö–∞—Ä—ñ", "–≥—ñ—Ä—á–∏—Ü—è", "—Å–æ—î–≤–∏–π —Å–æ—É—Å", "—Ç–æ–º–∞—Ç–Ω–∞ –ø–∞—Å—Ç–∞", "–∫–µ—Ç—á—É–ø", "–º–∞–π–æ–Ω–µ–∑",
    "–∫—Ä–æ—Ö–º–∞–ª—å"
]
last_generated_ingredients = {}

def _parse_ddmmyyyy(d: str) -> Optional[date]:
    try:
        return datetime.strptime(d, "%d.%m.%Y").date()
    except Exception:
        return None

async def suggest_recipe(user_id: int, meal_type: str) -> str:
    global last_generated_ingredients
    last_generated_ingredients.clear()

    products: List[Tuple[str, int, str, Optional[str]]] = await get_all_products_with_expiry(user_id)
    profile = await get_user_profile(user_id)

    if not products:
        return (
            "üòï –£ —Ç–µ–±–µ –∑–∞—Ä–∞–∑ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫. "
            "–î–æ–¥–∞–π –∫—ñ–ª—å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤, —â–æ–± —è –º—ñ–≥ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–≤–∞—Ç–∏ —â–æ—Å—å —Å–º–∞—á–Ω–µ!"
        )

    # –û–±—Ä–æ–±–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—é
    allergies = [x.strip().lower() for x in (profile.get("allergies") or "").split(",") if x.strip()]
    dislikes = [x.strip().lower() for x in (profile.get("dislikes") or "").split(",") if x.strip()]
    status = (profile.get("status") or "").strip().lower()

    today = datetime.today().date()
    tomorrow = today + timedelta(days=1)

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ (—Ç–µ—Ä–º—ñ–Ω –¥–æ –∑–∞–≤—Ç—Ä–∞)
    priority_products = []
    other_products = []

    for name, quantity, unit, expiry_str in products:
        name_lower = name.lower()
        if any(a in name_lower for a in allergies + dislikes):
            continue

        expiry_date = _parse_ddmmyyyy(expiry_str) if expiry_str else None

        # —ñ–≥–Ω–æ—Ä—É—î–º–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ, —ñ–Ω—à—ñ –±–µ—Ä–µ–º–æ, —É —Ç.—á. –±–µ–∑ –¥–∞—Ç–∏
        if expiry_date is not None and expiry_date < today:
            continue

        item_str = f"{name} {quantity} {unit}"
        if expiry_date is not None and expiry_date <= tomorrow:
            priority_products.append(item_str)
        else:
            other_products.append(item_str)

    if not (priority_products or other_products):
        return (
            "‚ùå –£—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫—É –≤—Ö–æ–¥—è—Ç—å –¥–æ —Å–ø–∏—Å–∫—É –∞–ª–µ—Ä–≥–µ–Ω—ñ–≤, –Ω–µ–ª—é–±–∏–º–∏—Ö –∞–±–æ –∑ –≤–∏—á–µ—Ä–ø–∞–Ω–∏–º —Ç–µ—Ä–º—ñ–Ω–æ–º. "
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–Ω–æ–≤–∏ –ø—Ä–æ—Ñ—ñ–ª—å –∞–±–æ –¥–æ–¥–∞–π –Ω–æ–≤—ñ –ø—Ä–æ–¥—É–∫—Ç–∏."
        )

    filtered_products = priority_products + other_products
    available_ingredients = ", ".join(filtered_products)

    meal_names = {
        "breakfast": "—Å–Ω—ñ–¥–∞–Ω–æ–∫",
        "lunch": "–æ–±—ñ–¥",
        "dinner": "–≤–µ—á–µ—Ä—é",
        "snack": "–ø–µ—Ä–µ–∫—É—Å"
    }

    profile_note = ""
    if status == "–≤–µ–≥–∞–Ω":
        profile_note = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –≤–µ–≥–∞–Ω–æ–º. –ù–µ –≤–∫–ª—é—á–∞–π –∂–æ–¥–Ω–∏—Ö –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —Ç–≤–∞—Ä–∏–Ω–Ω–æ–≥–æ –ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—è."
    elif status == "–≤–µ–≥–µ—Ç–∞—Ä—ñ–∞–Ω–µ—Ü—å":
        profile_note = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –≤–µ–≥–µ—Ç–∞—Ä—ñ–∞–Ω—Ü–µ–º. –ù–µ –≤–∫–ª—é—á–∞–π –º º—è—Å–∞, —Ä–∏–±–∏ —Ç–∞ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ñ–≤."

    if allergies:
        profile_note += f"\n–ù–µ –≤–∫–ª—é—á–∞–π –ø—Ä–æ–¥—É–∫—Ç–∏: {', '.join(allergies)} ‚Äî –Ω–∞ –Ω–∏—Ö —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–ª–µ—Ä–≥—ñ—è."
    if dislikes:
        profile_note += f"\n–ù–µ –≤–∫–ª—é—á–∞–π –ø—Ä–æ–¥—É–∫—Ç–∏: {', '.join(dislikes)} ‚Äî –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —ó—Ö –Ω–µ –ª—é–±–∏—Ç—å."

    prompt = (
        f"–¢–∏ –∫—É–ª—ñ–Ω–∞—Ä–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫. "
        f"–°–∫–ª–∞–¥–∏ –æ–¥–∏–Ω —Ä–µ—Ü–µ–ø—Ç –¥–ª—è {meal_names.get(meal_type, '–ø—Ä–∏–π–æ–º—É —ó–∂—ñ')} –∑ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤, —è–∫—ñ —î –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.\n\n"
        f"–û—Å—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —É —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫—É: {available_ingredients}.\n\n"
        f"{profile_note.strip()}\n\n"
        f"‚ùó –í–∞–∂–ª–∏–≤–æ:\n"
        f"- –ù–µ –≤–∏–≥–∞–¥—É–π –ø—Ä–æ–¥—É–∫—Ç—ñ–≤, —è–∫–∏—Ö –Ω–µ–º–∞—î –≤ —Ü—å–æ–º—É —Å–ø–∏—Å–∫—É.\n"
        f"- –ê–ª–µ –º–æ–∂–µ—à –≤—ñ–ª—å–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±–∞–∑–æ–≤—ñ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏: {', '.join(BASIC_INGREDIENTS)} ‚Äî –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫—É.\n"
        f"- –ù–µ –∑–º—ñ–Ω—é–π –Ω–∞–∑–≤–∏ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤! –Ø–∫—â–æ –≤ —Å–ø–∏—Å–∫—É —î '—Ç–µ—Å—Ç–æ–≤–∏–π —Å–∏—Ä', –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Å–∞–º–µ —Ç–∞–∫—É –Ω–∞–∑–≤—É. –£ –±–ª–æ—Ü—ñ –Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏: –Ω–µ –∑–º—ñ–Ω—é–π –Ω–∞–∑–≤–∏ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤. –ù–∞–≤—ñ—Ç—å —è–∫—â–æ –Ω–∞–∑–≤–∞ –≤–∏–≥–ª—è–¥–∞—î —è–∫ –∑ –ø–æ–º–∏–ª–∫–æ—é ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —ó—ó –≤ —Ç–æ—á–Ω–æ—Å—Ç—ñ —Ç–∞–∫, —è–∫ —É —Å–ø–∏—Å–∫—É. –¶–µ –≤–∞–∂–ª–∏–≤–æ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ª–∏—à–∫—ñ–≤ —É —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫—É.\n"
        f"- –ù–µ –∑–º—ñ–Ω—é–π —Ñ–æ—Ä–º—É —Å–ª–æ–≤–∞ (–æ–¥–Ω–∏–Ω–∞/–º–Ω–æ–∂–∏–Ω–∞). –Ø–∫—â–æ —É —Å–ø–∏—Å–∫—É —î '–Ø–π—Ü—è', –Ω–µ –ø–∏—à–∏ '–Ø–π—Ü–µ', —ñ –Ω–∞–≤–ø–∞–∫–∏.\n"
        f"- –ù–∞–∑–≤–∏, –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∞ –æ–¥–∏–Ω–∏—Ü—ñ –≤–∏–º—ñ—Ä—É –º–∞—é—Ç—å –±—É—Ç–∏ —Ç–∞–∫–∏–º–∏ –∂, —è–∫ —É —Å–ø–∏—Å–∫—É —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤.\n"
        f"- –û–¥–∏–Ω–∏—Ü—è –≤–∏–º—ñ—Ä—É –º–∞—î –±—É—Ç–∏ –≤ —Ç–æ—á–Ω–æ—Å—Ç—ñ —Ç–∞–∫–æ—é, —è–∫ —É —Å–ø–∏—Å–∫—É. –ù–µ –∑–∞–º—ñ–Ω—é–π '—à—Ç' –Ω–∞ '–∫—Ä–∏—à–∫–∏', '–≥' –Ω–∞ '–≥—Ä–∞–º–∏' —Ç–æ—â–æ.\n"
        f"- –ù–µ –∑–º—ñ–Ω—é–π –º–∞—Å—à—Ç–∞–± –æ–¥–∏–Ω–∏—Ü—ñ –≤–∏–º—ñ—Ä—É. –Ø–∫—â–æ –≤ —Å–ø–∏—Å–∫—É '–ª', –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π '–º–ª'. –Ø–∫—â–æ '–∫–≥', –Ω–µ –ø–∏—à–∏ '–≥'. –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¥—Ä–æ–±–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 0.1 –ª.\n"
        f"- –ù–∞–∑–≤–∏ —ñ–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç—ñ–≤ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –≤ —Ç–æ—á–Ω–æ—Å—Ç—ñ —Ç–∞–∫–∏–º–∏ –∂, —â–æ–± –±–æ—Ç –º—ñ–≥ –æ–Ω–æ–≤–∏—Ç–∏ –∑–∞–ª–∏—à–∫–∏ —É —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫—É.\n\n"
        f"üìã –§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (–¥–æ—Ç—Ä–∏–º—É–π—Å—è —Ç–æ—á–Ω–æ!):\n"
        f"1. üî∂ –ù–∞–∑–≤–∞ —Å—Ç—Ä–∞–≤–∏ (–Ω–∞ –æ–∫—Ä–µ–º–æ–º—É —Ä—è–¥–∫—É)\n"
        f"2. –û–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π –ø—ñ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ **–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏:** (—Å–∞–º–µ —Ç–∞–∫, –∑ –¥–≤–æ–∫—Ä–∞–ø–∫–æ—é)\n"
        f"- –ù–∞–∑–≤–∞, –ö—ñ–ª—å–∫—ñ—Å—Ç—å –û–¥–∏–Ω–∏—Ü—è\n"
        f"- –ù–∞–∑–≤–∞, –ö—ñ–ª—å–∫—ñ—Å—Ç—å –û–¥–∏–Ω–∏—Ü—è\n"
        f"3. –û–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–π –ø—ñ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ **üî∑ –†–µ—Ü–µ–ø—Ç:** (—Å–∞–º–µ —Ç–∞–∫, –∑ —ñ–∫–æ–Ω–∫–æ—é —Ç–∞ –¥–≤–æ–∫—Ä–∞–ø–∫–æ—é)\n"
        f"1. –ö—Ä–æ–∫ 1\n"
        f"2. –ö—Ä–æ–∫ 2\n"
        f"...\n"
        f"‚ùó –ë–µ–∑ –∂–æ–¥–Ω–∏—Ö –ø–æ–±–∞–∂–∞–Ω—å, –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤, –ø–æ—è—Å–Ω–µ–Ω—å. –õ–∏—à–µ —á—ñ—Ç–∫–∏–π —Ä–µ—Ü–µ–ø—Ç —É –≤–∫–∞–∑–∞–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ."
    )

    print("PROMPT:\n", prompt)

    try:
        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢–∏ –∫—É–ª—ñ–Ω–∞—Ä–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=700,
            temperature=0.6
        )

        content = response.choices[0].message.content
        print("GPT RESPONSE:\n", content)

        if "–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏:" not in content or "üî∑ –†–µ—Ü–µ–ø—Ç:" not in content:
            return "‚ö†Ô∏è –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ—Ü–µ–ø—Ç—É –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ—á—ñ–∫—É–≤–∞–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É! –°–ø—Ä–æ–±—É–π –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —ñ–Ω—à–∏–π —Ä–µ—Ü–µ–ø—Ç."

        last_generated_ingredients = extract_ingredients(content)
        return content

    except Exception as e:
        print("GPT Error:", e)
        return "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å—Ç—Ä–∞–≤—É. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ."


def extract_ingredients(text: str) -> dict:
    ingredients = {}
    match = re.search(r"–Ü–Ω–≥—Ä–µ–¥—ñ—î–Ω—Ç–∏:(.*?)üî∑ –†–µ—Ü–µ–ø—Ç:", text, re.DOTALL)
    if not match:
        return {}

    block = match.group(1)
    lines = block.strip().split("\n")
    for line in lines:
        if line.startswith("- "):
            line = line[2:]
        parts = line.strip().split(", ")
        if len(parts) != 2:
            continue
        name = parts[0].strip().lower()
        qty_unit = parts[1].strip().split(" ", 1)
        if len(qty_unit) != 2:
            continue
        try:
            quantity = float(qty_unit[0].replace(",", "."))
        except ValueError:
            continue
        unit = qty_unit[1]
        ingredients[(name, unit)] = quantity
    return ingredients


def filter_expired_batches_before_deduction(
    product_batches: List[Tuple[int, float, Optional[datetime]]]
) -> List[Tuple[int, float, Optional[datetime]]]:
    """–ü–æ–≤–µ—Ä—Ç–∞—î –ª–∏—à–µ –Ω–µ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω—ñ –ø–∞—Ä—Ç—ñ—ó. None (–±–µ–∑ —Ç–µ—Ä–º—ñ–Ω—É) –≤–≤–∞–∂–∞—î–º–æ –ø—Ä–∏–¥–∞—Ç–Ω–∏–º–∏."""
    today = datetime.today().date()
    kept = []
    for batch in product_batches:
        exp_dt = batch[2]
        if exp_dt is None:
            kept.append(batch)
        else:
            try:
                if exp_dt.date() >= today:
                    kept.append(batch)
            except Exception:
                # —è–∫—â–æ –¥–∞—Ç–∞ –∑—ñ–ø—Å–æ–≤–∞–Ω–∞ ‚Äî –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞: –≤—ñ–¥–∫–∏–¥–∞—î–º–æ
                pass
    return kept